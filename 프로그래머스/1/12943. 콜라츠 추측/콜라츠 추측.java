/*
주어진 수가 1이 될 때까지 작업을 반복하면 모든 수를 1로 만들 수 있다는 추측
1. 입력된 수가 짝수라면 2로 나눈다.
2. 입력된 수가 홀수라면 3을 곱하고 1을 더한다.
3. 결과로 나온 수에 같은 작업을 1이될 때까지 반복한다.
이 작업을 총 몇 번 반복하는지를 반환하라.
-> while문
1-3번 반복
만약 주어진 수가 1이 된다면 break;
=> 25점 왜? while문이 멈추기 않고 무한대로 반복 중.
while문을 true로 조건을 주지 않고 n이 1보다 클 경우로 두고, if (n == 1) break; 구문을 뺀다.
그렇게 되면 자동적으로 n이 1이면 while문이 실행되지 않으니, answer는 0 또는 반복된 횟수만큼으로 return 될 것이다.
=> 75점. 코드 중 어떤 부분이 잘못되었다는 건데, 무엇이 잘못된 건지 모르겠다. 아마도 answer가 500회 이상이 되었을 때 과정이 제대로 산출되지 않는 것 같다.
num이 큰 숫자로 주어질 때 연산 과정에서 int형 범위를 벗어나는 것 같다. -> 자료형을 바꿔야 할 것 같다.
*/
class Solution {
    public int solution(int num) {
        int answer = 0;
        long n = num;
        while(n > 1){
            if(n%2==0){ // 짝수
                n /= 2;
                answer++;
            }
            
            else { // 홀수
                n = n*3 + 1;
                answer++;
            }
            if(answer > 500){
                if(n != 1) {
                    answer = -1;
                    break;
                }
            }
        }
        return answer;
    }
}